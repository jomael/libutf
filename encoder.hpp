/*
 *    This file is part of Utfx.
 *
 *    Utfx is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    Utfx is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with Utfx.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @defgroup encoding Encoding
 * @brief Information on encoding with the library.
 */
#ifndef UTFX_ENCODER_HPP
#define UTFX_ENCODER_HPP

#include <stdexcept>

namespace utfx {

	/** A UTF-8, UTF-16 or UTF-32 encoder.
	 * @ingroup encoding
	 * */

	class Encoder {
		public:
			/** A error generated by the encoder.
			 * @ingroup encoding
			 */
			class Error : public std::runtime_error {
				public:
					/** Initializes the error with an error message.
					 * @param what The error message.
					 */
					Error(const char * what) noexcept;
					virtual ~Error(void) noexcept;
			}; /* class Error */
			/** A bad code unit that was written to the encoder.
			 * @ingroup encoding
			 */
			class BadCodeUnit : public Error {
				/** The code unit that generated the exception */
				char32_t code_unit;
				public:
					/** Initializes the error with the code unit that caused it.
					 * @param code_unit The code unit that caused the error.
					 */
					BadCodeUnit(char32_t code_unit) noexcept;
					virtual ~BadCodeUnit(void) noexcept;
					/** Returns the code unit that generated the exception.
					 * @returns The code unit that generated the exception.
					 */
					char32_t GetCodeUnit(void) const noexcept;
			}; /* class BadCodeUnit */
			/** The mode of the encoder.
			 * This affects what how the data will be encoded when it is written
			 * and read from the encoder.
			 * @ingroup encoding
			 */
			enum class Mode {
				/** UTF-8 */
				UTF8,
				/** UTF-16 (little endian) */
				UTF16_LE,
				/** UTF-16 (big endian) */
				UTF16_BE,
				/** UTF-32 (little endian) */
				UTF32_LE,
				/** UTF-32 (big endian) */
				UTF32_BE };
		private:
			/** The current mode of the encoder. */
			Mode mode;
			/** A collection of possible output data types. */
			union {
				/** The UTF-8 output data type */
				char out8[4];
				/** The UTF-16 output data type */
				char16_t out16[2];
				/** The UTF-32 output data type */
				char32_t out32; };
		public:
			Encoder(void) noexcept;
			~Encoder(void) noexcept;
			/** Returns the current mode of the encoder.
			 * @returns The current mode of the encoder. */
			Encoder::Mode GetMode(void) const noexcept;
			/** Sets the mode of the encoder.
			 */
			void SetMode(Encoder::Mode mode) noexcept;
			/** Writes data to the encoder.
			 * Note that this function may throw a @ref Error.
			 * @param input The input code point to be encoded.
			 * */
			void Write(char32_t input);
	}; /* class Encoder */

} /* namespace utfx */

#endif /* UTFX_ENCODER_HPP */

