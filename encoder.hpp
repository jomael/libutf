/*
 *    This file is part of Utfx.
 *
 *    Utfx is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    Utfx is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with Utfx.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef UTFX_ENCODER_HPP
#define UTFX_ENCODER_HPP

#include <cstdlib>
#include <stdexcept>

namespace utfx {

	/** A UTF-8, UTF-16 or UTF-32 encoder.
	 * Initialized to UTF-8.
	 * @ingroup utfx
	 * */

	class Encoder {
		public:
			/** A error generated by the encoder.
			 * @ingroup utfx
			 */
			class Error : public std::runtime_error {
				public:
					/** Initializes the error with an error message.
					 * @param what The error message.
					 */
					Error(const char * what) noexcept;
					virtual ~Error(void) noexcept;
			}; /* class Error */
			/** A bad code unit that was written to the encoder.
			 * @ingroup utfx
			 */
			class BadCodeUnit : public Error {
				/** The code unit that generated the exception */
				char32_t code_unit;
				public:
					/** Initializes the error with the code unit that caused it.
					 * @param code_unit The code unit that caused the error.
					 */
					BadCodeUnit(char32_t code_unit) noexcept;
					virtual ~BadCodeUnit(void) noexcept;
					/** Returns the code unit that generated the exception.
					 * @returns The code unit that generated the exception.
					 */
					char32_t GetCodeUnit(void) const noexcept;
			}; /* class BadCodeUnit */
			/** The mode of the encoder.
			 * This affects what how the data will be encoded when it is written
			 * and read from the encoder.
			 * @ingroup utfx
			 */
			enum class Mode {
				/** UTF-8 */
				UTF8,
				/** UTF-16 (little endian) */
				UTF16_LE,
				/** UTF-16 (big endian) */
				UTF16_BE,
				/** UTF-32 (little endian) */
				UTF32_LE,
				/** UTF-32 (big endian) */
				UTF32_BE };
			/** Describes whether the encoder is reading input or writing output */
			enum class State {
				/** The encoder is reading input */
				Reading,
				/** The encoder is writing output */
				Writing };
		private:
			/** A pointer to the encoder structure */
			void * encoder_ptr;
		public:
			Encoder(void);
			/** Initializes an encoder with specified mode.
			 * @param mode The mode to initialize the encoder in
			 * @ingroup utfx
			 */
			Encoder(Encoder::Mode mode);
			~Encoder(void) noexcept;
			/** Returns the current mode of the encoder.
			 * @returns The current mode of the encoder. */
			Encoder::Mode GetMode(void) const noexcept;
			/** Returns the current state of the encoder.
			 * @returns The current state of the encoder. */
			Encoder::State GetState(void) const noexcept;
			/** Returns a pointer to the data structure of the encoder.
			 * @returns A pointer to the data structure of the encoder. */
			void * GetCType(void) noexcept;
			/** Reads encoded data from the encoder.
			 * If there is no encoded data, nothing is read.
			 * If the read buffer cannot hold the entire character, nothing is read.
			 * On a succesfull read, the encoded data is discarded internally.
			 * @param byte_array An address to write the encoded data to.
			 * @param byte_count The number of bytes under the read address.
			 * @returns The number of bytes written.
			 */
			unsigned long int Read(void * byte_array, unsigned long int byte_count) noexcept;
			/** Sets the mode of the encoder.
			 * @param mode The mode to set the encoder to.
			 */
			void SetMode(Encoder::Mode mode) noexcept;
			/** Writes data to the encoder.
			 * Note that this function may throw a @ref Error.
			 * @param input The input code point to be encoded.
			 * */
			void Write(char32_t input);
	}; /* class Encoder */

	Encoder& operator << (Encoder& encoder, char32_t input);

} /* namespace utfx */

#endif /* UTFX_ENCODER_HPP */

